// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      pass: post-process
      rasterizerState:
        cullMode: none
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: one
          blendDst: zero
      properties:

}%


CCProgram vs %{
  
  precision highp float;
    
  #include <legacy/decode-standard>
  #include <builtin/uniforms/cc-global>
  #include <common/common-define>

  out vec2 v_uv;

  void main () {
    StandardVertInput In;
    CCDecode(In);
    CC_HANDLE_GET_CLIP_FLIP(In.position.xy);
    gl_Position = In.position;

    v_uv = a_texCoord;
  }

}%

CCProgram ubo %{
    uniform PostUBO {
        vec4 texSize;
        vec4 params;
    };
    #pragma rate inputTexture pass
    uniform sampler2D inputTexture;
}%

CCProgram fs %{
    precision highp float;

    #include <builtin/uniforms/cc-global>
    #include <legacy/output-standard>
    #include <unpack>

    in vec2 v_uv;
    #include <ubo>

    layout(location = 0) out vec4 fragColor;
    void main () {

        vec2 texel = cc_screenSize.zw;

        // kernel definition (in glsl matrices are filled in column-major order)

        const mat3 Gx = mat3( -1, -2, -1, 0, 0, 0, 1, 2, 1 ); // x direction kernel
        const mat3 Gy = mat3( -1, 0, 1, -2, 0, 2, -1, 0, 1 ); // y direction kernel

        // fetch the 3x3 neighbourhood of a fragment

        // first column
        float tx0y0 = texture( inputTexture, v_uv + texel * vec2( -1, -1 ) ).r;
        float tx0y1 = texture( inputTexture, v_uv + texel * vec2( -1,  0 ) ).r;
        float tx0y2 = texture( inputTexture, v_uv + texel * vec2( -1,  1 ) ).r;

        // second column
        float tx1y0 = texture( inputTexture, v_uv + texel * vec2(  0, -1 ) ).r;
        float tx1y1 = texture( inputTexture, v_uv + texel * vec2(  0,  0 ) ).r;
        float tx1y2 = texture( inputTexture, v_uv + texel * vec2(  0,  1 ) ).r;

        // third column
        float tx2y0 = texture( inputTexture, v_uv + texel * vec2(  1, -1 ) ).r;
        float tx2y1 = texture( inputTexture, v_uv + texel * vec2(  1,  0 ) ).r;
        float tx2y2 = texture( inputTexture, v_uv + texel * vec2(  1,  1 ) ).r;

        // gradient value in x direction
        float valueGx = Gx[0][0] * tx0y0 + Gx[1][0] * tx1y0 + Gx[2][0] * tx2y0 +
        Gx[0][1] * tx0y1 + Gx[1][1] * tx1y1 + Gx[2][1] * tx2y1 +
        Gx[0][2] * tx0y2 + Gx[1][2] * tx1y2 + Gx[2][2] * tx2y2;

        // gradient value in y direction
        float valueGy = Gy[0][0] * tx0y0 + Gy[1][0] * tx1y0 + Gy[2][0] * tx2y0 +
        Gy[0][1] * tx0y1 + Gy[1][1] * tx1y1 + Gy[2][1] * tx2y1 +
        Gy[0][2] * tx0y2 + Gy[1][2] * tx1y2 + Gy[2][2] * tx2y2;

        // magnitute of the total gradient

        float G = sqrt( ( valueGx * valueGx ) + ( valueGy * valueGy ) );

        fragColor = vec4( vec3( G ), 1 );

    }
  
}%

